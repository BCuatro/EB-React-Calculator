{"version":3,"sources":["components/buttons/NumberButton.js","components/display/Display.js","components/calculator/Calculator.js","components/instructions/InstructionItem.js","components/instructions/Instruction.js","App.js","index.js"],"names":["NumberButton","_ref","symbol","handler","parameter","idType","react_default","a","createElement","className","id","onClick","Display","num","numberInput","storedNumber","parenthesesOn","number","isNaN","toString","length","Number","toExponential","Calculator","_useState","useState","_useState2","Object","slicedToArray","setInput","_useState3","_useState4","pressedOps","setPressedOps","_useState5","_useState6","setStoredNumber","_useState7","_useState8","operator","setOperator","_useState9","storedVal","storedOp","_useState10","beforeParentheses","setBeforeValues","_useState11","_useState12","pressedParentheses","setPressedParentheses","clearHandler","input","calculationHandler","calcResults","Math","pow","functionDictionary","+/-","calculation","clear","includes","operation","sign","result","parentheses","parResults","percent","squareRoot","sqrt","square","components_display_Display","SPECIALOPERATORS","map","specialOp","buttons_NumberButton","key","concat","btnSymbol","classType","ADDITIONALOPERATORS","additionalOp","NUMS","BASICOPERATORS","basicOp","InstructionItem","instruction","Instruction","BasicOp","instructions_InstructionItem","SpecialOp","AdditionalOp","App","components_calculator_Calculator","instructions_Instruction","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.8b00047b.chunk.js","sourcesContent":["import React from 'react'\nimport \"./buttons.css\"\n\nconst NumberButton = ({symbol, handler, parameter, idType }) => {\n  return (\n   <button \n      className = \"button\"\n      id = {idType} \n      onClick = {() => handler(parameter)}> {symbol}\n   </button>\n  )\n}\n\nexport default NumberButton","import React from 'react'\nimport \"../calculator/Calculator.css\"\nimport \"./Display.css\"\nconst Display = ({numberInput, storedNumber, parenthesesOn}) => {\n\n    let number = numberInput ? numberInput: storedNumber\n\n    const errorHandling = (num) =>{\n        if(isNaN(num) && num !== \".\"){\n            return \"Error\" \n        }\n\n         if(num.toString().length > 12){\n            // if(Number(num).toExponential(10).toString().slice(Number(num).toExponential(10).toString().length-3)=== \"e+0\"){\n            //    num = Number(num).toExponential(10).toString().slice(0,Number(num).toExponential(10).toString().length-3)\n            //    return (Number(num) *1).toString()\n            // }\n            \n            return Number(num).toExponential(12).toString()\n         }\n\n        return num\n    }\n\n    number = errorHandling(number)\n\n    return (\n        // <div className= \"display\" id ={(number.length > 10 ) ? \"textId\" : \"\"}> {number}</div>\n        <div className = \"displayContainer\"> \n            <div className = \"parenthesesPrompt\" id = {parenthesesOn ? \"\" : \"non-visible\"} >( Calculating Value )</div>\n            <div className= \"display\"> {number}</div>\n            {/* <div className= \"display\" id ={(number.length < 15 ) ? \"\" : \"textId\"}> {number}</div> */}\n        </div>\n    )\n}\n\nexport default Display","import React,{useState} from 'react'\nimport NumberButton from '../buttons/NumberButton';\nimport \"./Calculator.css\"\nimport NUMS from \"../buttons/button-data/NumberData.json\"\nimport BASICOPERATORS from \"../buttons/button-data/BasicOperations.json\"\nimport SPECIALOPERATORS from \"../buttons/button-data/SpecialOperations.json\"\nimport ADDITIONALOPERATORS from \"../buttons/button-data/AdditionalOperations.json\"\nimport Display from '../display/Display';\n\nconst Calculator = () => {\n    const[numberInput, setInput] = useState(\"0\")\n    const[pressedOps, setPressedOps] = useState(false)\n    const[storedNumber, setStoredNumber] = useState(\"0\")\n    const[operator, setOperator] = useState(\"\");\n    const[beforeParentheses, setBeforeValues] = useState({\"storedVal\":\"\", \"storedOp\": \"\"})\n    const[pressedParentheses, setPressedParentheses] = useState(false)\n  \n   \n    const numberInputHandler = (number) => {\n        \n        setPressedOps(false);\n\n        if(numberInput === \"Error\"){\n            clearHandler(\"A/C\")\n            setInput(number.toString())\n        }\n\n        if ((storedNumber && pressedOps)) {\n            setInput(number.toString());\n            return;\n        }\n    \n        if (number === 0 && numberInput === \"0\" ) {\n            setInput(\"0\");\n            return;\n        }\n\n        if(number === \".\"){\n            if (!numberInput.includes(\".\")) {\n                setInput(numberInput.toString() + \".\");\n            }\n            return\n        }\n\n       \n        if (numberInput === \"0\") {\n            setInput(number.toString());\n        } else {\n            setInput(numberInput.toString() + number.toString());\n        }\n        \n    };\n\n\n    const operationHandler = (sign) =>{\n\n        let result = numberInput? numberInput : storedNumber\n        \n        setPressedOps(true)\n        \n        if(storedNumber && operator && pressedOps === false){\n            result= calculationHandler()\n        }\n\n        setStoredNumber(Number(result))\n        setOperator(sign)\n\n    }\n\n\n    const squareRootHandler = () => {\n        let number = numberInput ? numberInput : storedNumber;\n        \n        setPressedOps(true)\n\n        let calcResults = Math.sqrt(Number(number));\n\n        setInput(calcResults.toString());\n    };\n\n\n    const percentHandler = () => {\n        let number = numberInput ? numberInput : storedNumber;\n        \n        setPressedOps(true)\n\n        let calcResults = number/100;\n\n        setInput(calcResults.toString());\n    };\n\n\n    const squareHandler = () => {\n        let number = numberInput ? numberInput : storedNumber;\n        \n        setPressedOps(true)\n\n        let calcResults = number * number;\n\n        setInput(calcResults.toString());\n    };\n\n\n    const clearHandler = (input) => {\n        if (input === \"A/C\") {\n          setOperator(\"\");\n          setStoredNumber(\"0\");\n          setBeforeValues({\"storedVal\":\"\", \"storedOp\": \"\"});\n          setPressedParentheses(false);\n        }\n        setInput(\"0\");\n    };\n\n\n    const calculationHandler = () =>{\n\n        let calcResults = numberInput ? numberInput : storedNumber\n\n        if(operator === \"+\"){\n            calcResults = storedNumber + Number(numberInput)\n        }\n        if(operator === \"-\"){\n            calcResults = storedNumber - Number(numberInput)\n        }\n        if(operator === \"x\"){\n            calcResults = storedNumber * Number(numberInput)\n        }\n        if(operator === \"/\"){\n            calcResults = storedNumber / Number(numberInput)\n        }\n        if(operator === \"EXP\"){\n            calcResults = storedNumber ** Number(numberInput)\n        } \n    \n        setOperator(\"\")\n        setInput(\"\")\n        setStoredNumber(calcResults.toString())\n        \n        return calcResults.toString()\n    }\n\n\n    const negPosOp = () => {\n      let num =numberInput ? numberInput : storedNumber\n      setInput((Number(num) * -1).toString())\n    } \n    \n\n    const parenthesesHandler = () => {\n        if (pressedParentheses === false) {\n            setPressedParentheses(true);\n            setBeforeValues({\"storedVal\":storedNumber, \"storedOp\": operator});\n            setStoredNumber(\"\");\n            setInput(\"0\");\n        } else { \n            setPressedParentheses(false);\n            let parResults = calculationHandler();\n            setInput(parResults);\n            setStoredNumber(beforeParentheses.storedVal);\n            setOperator(beforeParentheses.storedOp)\n            setBeforeValues({\"storedVal\":\"\", \"storedOp\": \"\"});\n        }\n    };\n \n\n    const functionDictionary = {\n        \"+/-\" : negPosOp, \n        \"calculation\": calculationHandler,\n        \"clear\": clearHandler,\n        \"numberInput\" : numberInputHandler,\n        \"operation\": operationHandler,\n        \"parentheses\": parenthesesHandler,\n        \"percent\": percentHandler,\n        \"squareRoot\": squareRootHandler,\n        \"square\": squareHandler,\n        \n    }\n    \n  return (\n    <div className = \"calcContainer\">\n\n         \n            {/* <div className = \"parenthesesPrompt\" id = {pressedParentheses ? \"\" : \"non-visible\"} >( Calculating Value )</div> */}\n            <Display \n            numberInput = {numberInput} \n            storedNumber= {storedNumber}\n            parenthesesOn = {pressedParentheses}\n            />\n        \n        \n        <div className= \"buttonContainer\">\n            <div className = \"numberContainer\"> \n                    \n                {SPECIALOPERATORS.map(specialOp => (\n                    \n                    <NumberButton \n                    key ={`button ${specialOp.id}`}\n                    symbol = {specialOp.btnSymbol}\n                    handler = {functionDictionary[specialOp.handler]}\n                    parameter={specialOp.parameter}\n                    classType = {specialOp.classType}\n                    idType = {specialOp.idType}\n                    />\n                    \n                ))}\n            \n                {ADDITIONALOPERATORS.map(additionalOp => (\n                    \n                    <NumberButton \n                    key ={`button ${additionalOp.id}`}\n                    symbol = {additionalOp.btnSymbol}\n                    handler = {functionDictionary[additionalOp.handler]}\n                    parameter={additionalOp.parameter}\n                    classType = {additionalOp.classType}\n                    idType = {additionalOp.idType}\n                    />\n                ))}\n            \n                {NUMS.map(number => (\n                    \n                    <NumberButton \n                    key ={`button ${number.id}`}\n                    symbol = {number.btnSymbol}\n                    handler = {functionDictionary[number.handler]}\n                    parameter={number.parameter}\n                    classType = {number.classType}\n                    idType = {number.idType}\n                    />\n                ))}\n                       \n            </div>\n            <div className= \"basicOpContainer\">\n                        \n                {BASICOPERATORS.map(basicOp => (\n                    \n                    <NumberButton \n                    key ={`button ${basicOp.id}`}\n                    symbol = {basicOp.btnSymbol}\n                    handler = {functionDictionary[basicOp.handler]}\n                    parameter={basicOp.parameter}\n                    classType = {basicOp.classType}\n                    idType = {basicOp.idType}\n                    />\n                    \n                ))}\n                    \n             </div>\n        </div>\n    </div>\n  )\n}\n\nexport default Calculator","import React from 'react'\nimport \"./Instructions.css\"\n\nconst InstructionItem = ({symbol, instruction}) => {\n  return (\n    <div className= \"instructionContext\">\n        <div className = \"symbolContainer\" >\n            <div className = \"instructionSymbols\"> {symbol} </div>\n        </div>\n        <div className = \"definitionContainer\">\n            <div className = \"definition\"> {instruction} </div>\n        </div>\n        \n        \n\n    </div>\n  )\n}\nexport default InstructionItem","import React from 'react'\nimport BASICOPERATORS from \"../buttons/button-data/BasicOperations.json\"\nimport SPECIALOPERATORS from \"../buttons/button-data/SpecialOperations.json\"\nimport ADDITIONALOPERATORS from \"../buttons/button-data/AdditionalOperations.json\"\nimport \"./Instructions.css\"\nimport InstructionItem from './InstructionItem';\n\n\nconst Instruction = () => {\n  return (\n    <div className = \"instructionContainer\">\n        <h2>Button Definition</h2>\n       <ul>\n        {BASICOPERATORS.map(BasicOp => (\n            <InstructionItem \n                key ={`Int-${BasicOp.id}`}\n                symbol = {BasicOp.btnSymbol} \n                instruction = {BasicOp.instruction}\n            />\n        ))}\n        {SPECIALOPERATORS.map(SpecialOp => (\n            <InstructionItem \n                key ={`Int-${SpecialOp.id}`}\n                symbol = {SpecialOp.btnSymbol} \n                instruction = {SpecialOp.instruction}\n            />\n        ))}\n        {ADDITIONALOPERATORS.map(AdditionalOp => (\n            <InstructionItem \n                key ={`Int-${AdditionalOp.id}`}\n                symbol = {AdditionalOp.btnSymbol} \n                instruction = {AdditionalOp.instruction}\n            />\n        ))}\n\n            \n       </ul>\n       \n    </div>\n  )\n}\n\nexport default Instruction","import React from 'react'\nimport Calculator from './components/calculator/Calculator';\nimport './App.css'\nimport Instruction from './components/instructions/Instruction';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1> My React Calculator</h1>\n      <main>\n        <Calculator />\n        <Instruction />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}